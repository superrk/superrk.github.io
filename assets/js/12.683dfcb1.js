(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{515:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一-代码整洁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-代码整洁"}},[t._v("#")]),t._v(" 一：代码整洁 🎉")]),t._v(" "),a("blockquote",[a("p",[t._v("让营地比你来时更干净")])]),t._v(" "),a("p",[t._v("光明不灭，代码永存")]),t._v(" "),a("h2",{attrs:{id:"二-命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-命名"}},[t._v("#")]),t._v(" 二：命名")]),t._v(" "),a("blockquote",[a("p",[t._v("合适的命名是头等大事，正如给新生儿起个好名字那样重要。不合适的命名通常是词不达意、误导观众、过度缩写等，由于英文并非我们的母语，找个合适的单词命名似乎真的很难。我建议是先把业务弄清楚，组织会议定下常用业务领域的单词，禁止组员各自发明，比如加号这个业务，既有booking，又有plussign(+)，有可能有jiahao这样的名称，这种不统一会带来一些困扰")])]),t._v(" "),a("h3",{attrs:{id:"_1-名副其实"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-名副其实"}},[t._v("#")]),t._v(" 1. 名副其实")]),t._v(" "),a("p",[t._v("请看下面这段代码，有几个人能读懂是什么含义。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dmzjzd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("改成下面这样是不是会好些")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" firstIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("secondIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("thirdIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cleanCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dateTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-避免误导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-避免误导"}},[t._v("#")]),t._v(" 2. 避免误导")]),t._v(" "),a("p",[t._v("举个栗子，listdiff(list1,list2) 这个方法给你的第一印象是做什么的，如果不看注释，可能很多情况下会被理解为计算两个list的差值，然而事实上他是计算list1有但list2没有的，可能更合理的写法是: listfilter(sourceList,exceptList)")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DoctorInfosResVO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoctorInfosBySpaceId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spaceId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DoctorInfoVO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDoctorInfoBySpaceId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spaceId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-有意义的区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-有意义的区分"}},[t._v("#")]),t._v(" 3. 有意义的区分")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changePassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" password1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" password2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changePassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" oldPassowrd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" newPassword"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-可读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-可读"}},[t._v("#")]),t._v(" 4.可读")]),t._v(" "),a("p",[t._v("主要针对的就是各种缩写和自造词，摒弃这种做法,除非你确认你的团队都把这个缩写固定为某种含义，")]),t._v(" "),a("h3",{attrs:{id:"_5-可搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-可搜索"}},[t._v("#")]),t._v(" 5.可搜索")]),t._v(" "),a("p",[t._v("硬编码通常是不好搜索的，因为通常你不清楚它对应的是什么含义，浪费记忆空间，且查找原始定义是困难的")]),t._v(" "),a("h3",{attrs:{id:"_6-类名和方法名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-类名和方法名"}},[t._v("#")]),t._v(" 6.类名和方法名")]),t._v(" "),a("p",[t._v("类名应为名词，方法名应为动词")]),t._v(" "),a("p",[t._v("可以想象一个类叫setProperty，一个方法叫property所带来的困惑了")]),t._v(" "),a("h3",{attrs:{id:"_7-每个概念应对应一个词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-每个概念应对应一个词"}},[t._v("#")]),t._v(" 7.每个概念应对应一个词")]),t._v(" "),a("p",[t._v("就像插入数据有人喜欢用insert，有人喜欢用save，但一个团队还是尽量保持一种写法。")]),t._v(" "),a("h3",{attrs:{id:"_8-添加有意义的语境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-添加有意义的语境"}},[t._v("#")]),t._v(" 8.添加有意义的语境")]),t._v(" "),a("p",[t._v("我们经常会用到id这个字段，如果不给其以前缀，则很难清楚其究竟是那个id，因此，我们需要给其具体的语境，通常是通过添加前缀或后缀的方式，但更好的方式是将其放到一个更大的结构体（类）中，给其已明确的含义，但是也别太详细了，这时这些命名就会显得啰嗦")]),t._v(" "),a("h2",{attrs:{id:"三-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-函数"}},[t._v("#")]),t._v(" 三：函数")]),t._v(" "),a("h3",{attrs:{id:"_1-越短小越好"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-越短小越好"}},[t._v("#")]),t._v(" 1.越短小越好")]),t._v(" "),a("blockquote",[a("p",[t._v("if/else/while语句的代码块应该只有一行，该行应该是一个函数调用语句。\n函数的缩进层级不应该多于一层或两层。")])]),t._v(" "),a("p",[t._v("当然我并不觉得一定要完全做到这样，如果块内调用的逻辑一眼就能看出是干什么的，也没必要就得写个函数，但是尽量缩小函数层级是应该要追求的目标。")]),t._v(" "),a("h3",{attrs:{id:"_2-只做一件事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-只做一件事"}},[t._v("#")]),t._v(" 2.只做一件事")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("如果函数只是做了该函数名下同一抽象层上的步骤，则函数只做了一件事。")]),t._v(" "),a("li",[t._v("要判断函数是否不止做了一件事，就是要看是否能再拆出一个函数。")])])]),t._v(" "),a("h3",{attrs:{id:"_3-每个函数一个抽象层级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-每个函数一个抽象层级"}},[t._v("#")]),t._v(" 3.每个函数一个抽象层级")]),t._v(" "),a("p",[t._v("有助于阅读和理解")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  获取个人信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserDTO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取基本信息")]),t._v("\n    … 此处写了"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("行\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取最近的一次订单信息")]),t._v("\n    … 此处写了"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("行\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取钱包余额、可用优惠券张数等")]),t._v("\n    … 此处写了"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("行\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" userDTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserDTO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取基本信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDTO")]),t._v(" userDTO"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserBasicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取最近的一次订单信息")]),t._v("\n    userDTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUserLastOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserLastOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取钱包、可用优惠券张数等")]),t._v("\n    userDTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUserAccount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserAccount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" userDTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-switch"}},[t._v("#")]),t._v(" 4.switch")]),t._v(" "),a("p",[t._v("把switch埋在较低的抽象层级，一般可以放在抽象工厂底下，用于创建多态对象。典型例子如加号的状态机")]),t._v(" "),a("h3",{attrs:{id:"_5-使用描述性的名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用描述性的名称"}},[t._v("#")]),t._v(" 5.使用描述性的名称")]),t._v(" "),a("p",[t._v("这个也还是命名，用合适的语言描述出函数的功能")]),t._v(" "),a("blockquote",[a("p",[t._v("函数越短小、功能越集中，就越便于取个好名字。\n别害怕长名称，长而具有描述性的名称，要比短而令人费解的名称好，要比描述性的长注释好。\n别害怕花时间取名字。")])]),t._v(" "),a("h3",{attrs:{id:"_6-函数参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-函数参数"}},[t._v("#")]),t._v(" 6.函数参数")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("参数越少越好，0参数最好，尽量避免用三个以上参数")]),t._v(" "),a("li",[t._v("参数越多，编写单元测试就越困难，因为要写太多的分支了")]),t._v(" "),a("li",[t._v("别用标识参数，向函数传入bool值是不好的，这意味着函数不止做一件事。可以将此函数拆成两个。")]),t._v(" "),a("li",[t._v("将参数的顺序编码进函数名，减轻记忆参数顺序的负担，例如,assertExpectedEqualsActual(expected, actual)")])])]),t._v(" "),a("p",[t._v("如果方法参数将超过3个，建议放在类中包装起来，否则再增加参数时，由于语义的强耦合会导致调用方语法错误。比如多条件的分页查询接口，常常会有很多查询参数，而且有可能增加，封装起来是最好的。")]),t._v(" "),a("h3",{attrs:{id:"_7-无副作用-分离操作与获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-无副作用-分离操作与获取"}},[t._v("#")]),t._v(" 7.无副作用，分离操作与获取")]),t._v(" "),a("p",[t._v("典型的就如在get方法里执行了其它操作，比如重置缓存，会话等")]),t._v(" "),a("h3",{attrs:{id:"_8-善用异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-善用异常"}},[t._v("#")]),t._v(" 8.善用异常")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deletePate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("page"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" E_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xxx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" E_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yyy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" E_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aaa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xxx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yyy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_8-抽离try-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-抽离try-catch"}},[t._v("#")]),t._v(" 8.抽离try-catch")]),t._v(" "),a("p",[t._v("最好把try和catch代码块的主体抽离出来，单独形成函数。然后我照着这条写了一个通用的方法。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("simpleTryCatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" tryFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Consumer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" catchFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            tryFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            catchFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_9-代码不要重复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-代码不要重复"}},[t._v("#")]),t._v(" 9.代码不要重复")]),t._v(" "),a("p",[t._v("标准就是你修改每一个功能时，只会修改一处，如果多余1处，ok，那么这就是重复了")]),t._v(" "),a("h3",{attrs:{id:"_10-持续改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-持续改进"}},[t._v("#")]),t._v(" 10.持续改进")]),t._v(" "),a("p",[t._v("很少有人能把初稿写的完善，写代码也是如此，我们刚开始写的时候尽可以先为完成功能，然后逐步打磨，拆分函数，改善名称，消除重复。")]),t._v(" "),a("blockquote",[a("p",[t._v("如何才是一个好的函数，单元测试好写的    --by Me")])]),t._v(" "),a("h3",{attrs:{id:"_11-最短路径-不要啰嗦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-最短路径-不要啰嗦"}},[t._v("#")]),t._v(" 11.最短路径,不要啰嗦")]),t._v(" "),a("p",[t._v("短的路径通常来讲段落感更强,逻辑上更容易理解")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcResponse")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RpcResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"四-注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-注释"}},[t._v("#")]),t._v(" 四：注释")]),t._v(" "),a("blockquote",[a("p",[t._v("Talk is cheap. Show me the code")])]),t._v(" "),a("h3",{attrs:{id:"_1-好注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-好注释"}},[t._v("#")]),t._v(" 1.好注释")]),t._v(" "),a("p",[t._v("好的注释应该简短,准确,最好的注释是没有注释。在我看来，必要的解释，警告，todo算是好的注释,\n以下推荐一个代码收起的命令（idea,vs都有）")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//region 功能描述")]),t._v("\n        ···\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//endregion")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-糟糕的注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-糟糕的注释"}},[t._v("#")]),t._v(" 2.糟糕的注释")]),t._v(" "),a("ol",[a("li",[t._v("只有你自己看的懂的")]),t._v(" "),a("li",[t._v("废话（getUserName这个方法需要写注释吗）")]),t._v(" "),a("li",[t._v("有误导性的注释(这种是最危险的,listdiff 为例，如果写了不准确的注释，还不如不写)")]),t._v(" "),a("li",[t._v("规矩注释(比如每个方法都要有标准javadoc的注释)")]),t._v(" "),a("li",[t._v("注释代码（除非你确认在注释只是暂时性的，要不还是乖乖删掉，git和svn的记性绝对比你好）")])]),t._v(" "),a("h2",{attrs:{id:"五-格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-格式"}},[t._v("#")]),t._v(" 五: 格式")]),t._v(" "),a("blockquote",[a("p",[t._v("代码是给机器运行的，但是也是给人看的。")])]),t._v(" "),a("p",[t._v("没有格式的典范比如代码混肴器,min.css,min.js，但我想没人会喜欢阅读这类文件吧。那么有个良好的格式显得尤其重要。所以，不要用记事本敲代码(手动狗头)")]),t._v(" "),a("h3",{attrs:{id:"_1-垂直格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-垂直格式"}},[t._v("#")]),t._v(" 1.垂直格式")]),t._v(" "),a("ol",[a("li",[t._v("方法间加空行做出区分")]),t._v(" "),a("li",[t._v("有调用关系的方法应尽量靠近，且调用者处于被调用者的上方")]),t._v(" "),a("li",[t._v("变量声明尽量靠近调用点，本地变量应该在函数顶部出现")]),t._v(" "),a("li",[t._v("自顶向下，善用structure")])]),t._v(" "),a("h3",{attrs:{id:"_2-横向格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-横向格式"}},[t._v("#")]),t._v(" 2.横向格式")]),t._v(" "),a("ol",[a("li",[t._v("一行代码不要超过1屏，通常为多个条件与或，下面是合适的例子")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" createOrderParamVO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" createOrderParamVO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" createOrderParamVO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPatientId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" createOrderParamVO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpaceId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("用空格分隔联系紧密的符号，例如:++,+=,==,&&,||,有一些编程专用字体会有连字符让这些变的更醒目(JetBrains Mono,Fira Code)")]),t._v(" "),a("li",[t._v("团队规则,在一个团队中，最好有一个统一的代码规则，如果懒得制定，那么用统一的ide的默认规则也是一个选择")])]),t._v(" "),a("blockquote",[a("p",[t._v("idea默认的格式化会自动加上空格，所以，提交代码之前，执行一次格式化(Ctrl+Alt+L)吧，避免合并代码时各种格式不同的问题，找到一个插件叫Save Action,能够在保存的时候自动格式化,可以尝试一下")])])])}),[],!1,null,null,null);s.default=e.exports}}]);